// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataconfig_taskinfo.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Dataconfig {

  /// <summary>Holder for reflection information generated from dataconfig_taskinfo.proto</summary>
  public static partial class DataconfigTaskinfoReflection {

    #region Descriptor
    /// <summary>File descriptor for dataconfig_taskinfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataconfigTaskinfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlkYXRhY29uZmlnX3Rhc2tpbmZvLnByb3RvEgpkYXRhY29uZmlnIlkKCFRh",
            "c2tJbmZvEg4KBlRhc2tJZBgBIAEoDRIMCgROYW1lGAIgASgJEgwKBERlc2MY",
            "AyABKAkSDQoFTlBDSUQYBCABKA0SEgoKTXVzaWNSZXNJRBgFIAEoDSI0Cg1U",
            "YXNrSW5mb0FycmF5EiMKBWl0ZW1zGAEgAygLMhQuZGF0YWNvbmZpZy5UYXNr",
            "SW5mb2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Dataconfig.TaskInfo), global::Dataconfig.TaskInfo.Parser, new[]{ "TaskId", "Name", "Desc", "NPCID", "MusicResID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Dataconfig.TaskInfoArray), global::Dataconfig.TaskInfoArray.Parser, new[]{ "Items" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TaskInfo : pb::IMessage<TaskInfo>,IComponent {
    private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dataconfig.DataconfigTaskinfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo(TaskInfo other) : this() {
      taskId_ = other.taskId_;
      name_ = other.name_;
      desc_ = other.desc_;
      nPCID_ = other.nPCID_;
      musicResID_ = other.musicResID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfo Clone() {
      return new TaskInfo(this);
    }

    /// <summary>Field number for the "TaskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private uint taskId_;
    /// <summary>
    ///* 任务ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///* 名称 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    /// <summary>
    ///* 描述 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NPCID" field.</summary>
    public const int NPCIDFieldNumber = 4;
    private uint nPCID_;
    /// <summary>
    ///* 对应的NPCID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NPCID {
      get { return nPCID_; }
      set {
        nPCID_ = value;
      }
    }

    /// <summary>Field number for the "MusicResID" field.</summary>
    public const int MusicResIDFieldNumber = 5;
    private uint musicResID_;
    /// <summary>
    ///* 对应Music的资源ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MusicResID {
      get { return musicResID_; }
      set {
        musicResID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (NPCID != other.NPCID) return false;
      if (MusicResID != other.MusicResID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (NPCID != 0) hash ^= NPCID.GetHashCode();
      if (MusicResID != 0) hash ^= MusicResID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaskId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TaskId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (NPCID != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NPCID);
      }
      if (MusicResID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MusicResID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaskId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (NPCID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NPCID);
      }
      if (MusicResID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MusicResID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfo other) {
      if (other == null) {
        return;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.NPCID != 0) {
        NPCID = other.NPCID;
      }
      if (other.MusicResID != 0) {
        MusicResID = other.MusicResID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TaskId = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 32: {
            NPCID = input.ReadUInt32();
            break;
          }
          case 40: {
            MusicResID = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaskInfoArray : pb::IMessage<TaskInfoArray>,IComponent {
    private static readonly pb::MessageParser<TaskInfoArray> _parser = new pb::MessageParser<TaskInfoArray>(() => new TaskInfoArray());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaskInfoArray> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Dataconfig.DataconfigTaskinfoReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfoArray() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfoArray(TaskInfoArray other) : this() {
      items_ = other.items_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaskInfoArray Clone() {
      return new TaskInfoArray(this);
    }

    /// <summary>Field number for the "items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Dataconfig.TaskInfo> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::Dataconfig.TaskInfo.Parser);
    private readonly pbc::RepeatedField<global::Dataconfig.TaskInfo> items_ = new pbc::RepeatedField<global::Dataconfig.TaskInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Dataconfig.TaskInfo> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaskInfoArray);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaskInfoArray other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaskInfoArray other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
