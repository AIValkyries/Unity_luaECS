//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ContextsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Entitas;
            
public partial class Contexts : IContexts {

    public static Contexts sharedInstance {
        get {
            if(_sharedInstance == null) {
                _sharedInstance = new Contexts();
            }

            return _sharedInstance;
        }
        set { _sharedInstance = value; }
    }

    static Contexts _sharedInstance;

    public static void CreateContextObserver(IContext context) {
#if(!ENTITAS_DISABLE_VISUAL_DEBUGGING && UNITY_EDITOR)
        if(UnityEngine.Application.isPlaying) {
            var observer = new Entitas.Unity.VisualDebugging.ContextObserver(context);
            UnityEngine.Object.DontDestroyOnLoad(observer.gameObject);
        }
#endif
    }

    
    private ModuleBaseContext _moduleBase;
    public static ModuleBaseContext moduleBase { get{return sharedInstance._moduleBase;} }
    
    private ModuleManagerContext _moduleManager;
    public static ModuleManagerContext moduleManager { get{return sharedInstance._moduleManager;} }
    
    private TestModuleContext _testModule;
    public static TestModuleContext testModule { get{return sharedInstance._testModule;} }

    public IContext[] allContexts { get { return new IContext [] { _moduleBase, _moduleManager, _testModule }; } }

    public void SetAllContexts() {
        _moduleBase = new ModuleBaseContext();
        _moduleManager = new ModuleManagerContext();
        _testModule = new TestModuleContext();

        CreateContextObserver(moduleBase);
        CreateContextObserver(moduleManager);
        CreateContextObserver(testModule);
    }
}
